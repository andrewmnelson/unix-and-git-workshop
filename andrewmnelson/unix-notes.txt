A unix filesystem is a hierarchy, or tree-structured construct, consisting of nodes which may refer to datafiles, devices, or directories which in turn may contain other nodes.
Filesystem nodes have attributes such as ownership and read/write/execute permissions, which control what can be done with the data contained in the node, and who is allowed to do it.
The path to a node consists of the full specification of the location of a node in the filesystem tree.
The root node of the tree is named '/', and every fully-specified path begins with /.
Unix maintains the idea of a 'working directory' which can be any directory node in the filesystem.
A path which does not begin with / is evaluated relative to the current working directory.
Special node names are defined which refer to the working directory:
  . specifies the current directory
  .. specifies the directory which contains the current directory (its "parent")

A unix program is an executable file of binary data, which is loaded into memory and run as a process. Similar to filesystem nodes, processes also have ownership and permissions which control what the process is able to do.
Every process has access to information about itself, the machine it's running on, the user running it, etc.  This information is called the process environment.
The process environment includes the location of the current working directory.
Processes also have access to standard input, output and error streams named stdin, stdout and stderr.

A unix shell is a program which listens for input from a keyboard or other input stream, interprets the input from that stream as system commands, and responds to those commands by a combination of changing its own configuration data, running other programs, and moving data to and from files, devices, and the inputs and outputs of programs.
The shell is able to route program output data either to its own stdout for display on the command-line terminal, or to the stdin stream of another program, or to a file.  This is called redirection or "piping".
The shell uses special names to control redirection:
  > specifies that output data should be written to a file
  >> specifies that output data should be appended to an existing file without overwriting
  < specifies that input data should be read from a file
  | specifies that output data from the program before the bar should be written to the input stream of the program after the bar

Shell commands include:
ls = list the contents of a directory
mkdir = create a new directory
rmdir = remove an existing directory
cp = copy an existing node or tree of nodes to a new location
mv = re-specify the location of a node or tree of nodes, effectively moving or renaming
rm = remove an existing node, or tree of nodes if the -r flag is used
cat = copy the contents of one or more nodes, in order, to stdout
echo = copy command-line arguments to stdout
more = copy stdin to stdout a page at a time, pausing between pages
less = arguably a better more
sort = read from stdin, arrange lines in sorted order, write sorted lines to stdout
cut = read from stdin, output specified segments of lines to stdout as delimited lists
paste = read from stdin, output delimited lists as concatenated lines
grep = read from stdin, output only lines containing specified patterns
